// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protos/SeverSocketMessages.proto

#ifndef PROTOBUF_Protos_2fSeverSocketMessages_2eproto__INCLUDED
#define PROTOBUF_Protos_2fSeverSocketMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Protos_2fSeverSocketMessages_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTESTImpl();
void InitDefaultsTEST();
void InitDefaultsServerMessageImpl();
void InitDefaultsServerMessage();
void InitDefaultsArduinoConnectedImpl();
void InitDefaultsArduinoConnected();
void InitDefaultsClientConnectedImpl();
void InitDefaultsClientConnected();
inline void InitDefaults() {
  InitDefaultsTEST();
  InitDefaultsServerMessage();
  InitDefaultsArduinoConnected();
  InitDefaultsClientConnected();
}
}  // namespace protobuf_Protos_2fSeverSocketMessages_2eproto
class ArduinoConnected;
class ArduinoConnectedDefaultTypeInternal;
extern ArduinoConnectedDefaultTypeInternal _ArduinoConnected_default_instance_;
class ClientConnected;
class ClientConnectedDefaultTypeInternal;
extern ClientConnectedDefaultTypeInternal _ClientConnected_default_instance_;
class ServerMessage;
class ServerMessageDefaultTypeInternal;
extern ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
class TEST;
class TESTDefaultTypeInternal;
extern TESTDefaultTypeInternal _TEST_default_instance_;

// ===================================================================

class TEST : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TEST) */ {
 public:
  TEST();
  virtual ~TEST();

  TEST(const TEST& from);

  inline TEST& operator=(const TEST& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TEST(TEST&& from) noexcept
    : TEST() {
    *this = ::std::move(from);
  }

  inline TEST& operator=(TEST&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TEST& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TEST* internal_default_instance() {
    return reinterpret_cast<const TEST*>(
               &_TEST_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TEST* other);
  friend void swap(TEST& a, TEST& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TEST* New() const PROTOBUF_FINAL { return New(NULL); }

  TEST* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TEST& from);
  void MergeFrom(const TEST& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TEST* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 number = 1;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  ::google::protobuf::int32 number() const;
  void set_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TEST)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 number_;
  mutable int _cached_size_;
  friend struct ::protobuf_Protos_2fSeverSocketMessages_2eproto::TableStruct;
  friend void ::protobuf_Protos_2fSeverSocketMessages_2eproto::InitDefaultsTESTImpl();
};
// -------------------------------------------------------------------

class ServerMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerMessage) */ {
 public:
  ServerMessage();
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerMessage(ServerMessage&& from) noexcept
    : ServerMessage() {
    *this = ::std::move(from);
  }

  inline ServerMessage& operator=(ServerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerMessage& default_instance();

  enum MessageCase {
    kArduinoConnectedMessage = 1,
    kClientConnectedMessage = 2,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerMessage* internal_default_instance() {
    return reinterpret_cast<const ServerMessage*>(
               &_ServerMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ServerMessage* other);
  friend void swap(ServerMessage& a, ServerMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ArduinoConnected arduinoConnectedMessage = 1;
  bool has_arduinoconnectedmessage() const;
  void clear_arduinoconnectedmessage();
  static const int kArduinoConnectedMessageFieldNumber = 1;
  const ::ArduinoConnected& arduinoconnectedmessage() const;
  ::ArduinoConnected* release_arduinoconnectedmessage();
  ::ArduinoConnected* mutable_arduinoconnectedmessage();
  void set_allocated_arduinoconnectedmessage(::ArduinoConnected* arduinoconnectedmessage);

  // .ClientConnected clientConnectedMessage = 2;
  bool has_clientconnectedmessage() const;
  void clear_clientconnectedmessage();
  static const int kClientConnectedMessageFieldNumber = 2;
  const ::ClientConnected& clientconnectedmessage() const;
  ::ClientConnected* release_clientconnectedmessage();
  ::ClientConnected* mutable_clientconnectedmessage();
  void set_allocated_clientconnectedmessage(::ClientConnected* clientconnectedmessage);

  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:ServerMessage)
 private:
  void set_has_arduinoconnectedmessage();
  void set_has_clientconnectedmessage();

  inline bool has_message() const;
  void clear_message();
  inline void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union MessageUnion {
    MessageUnion() {}
    ::ArduinoConnected* arduinoconnectedmessage_;
    ::ClientConnected* clientconnectedmessage_;
  } message_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_Protos_2fSeverSocketMessages_2eproto::TableStruct;
  friend void ::protobuf_Protos_2fSeverSocketMessages_2eproto::InitDefaultsServerMessageImpl();
};
// -------------------------------------------------------------------

class ArduinoConnected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ArduinoConnected) */ {
 public:
  ArduinoConnected();
  virtual ~ArduinoConnected();

  ArduinoConnected(const ArduinoConnected& from);

  inline ArduinoConnected& operator=(const ArduinoConnected& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ArduinoConnected(ArduinoConnected&& from) noexcept
    : ArduinoConnected() {
    *this = ::std::move(from);
  }

  inline ArduinoConnected& operator=(ArduinoConnected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ArduinoConnected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArduinoConnected* internal_default_instance() {
    return reinterpret_cast<const ArduinoConnected*>(
               &_ArduinoConnected_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ArduinoConnected* other);
  friend void swap(ArduinoConnected& a, ArduinoConnected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ArduinoConnected* New() const PROTOBUF_FINAL { return New(NULL); }

  ArduinoConnected* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ArduinoConnected& from);
  void MergeFrom(const ArduinoConnected& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ArduinoConnected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool fail = 1;
  void clear_fail();
  static const int kFailFieldNumber = 1;
  bool fail() const;
  void set_fail(bool value);

  // int32 arduinoId = 2;
  void clear_arduinoid();
  static const int kArduinoIdFieldNumber = 2;
  ::google::protobuf::int32 arduinoid() const;
  void set_arduinoid(::google::protobuf::int32 value);

  // int32 rfIdCardNo = 3;
  void clear_rfidcardno();
  static const int kRfIdCardNoFieldNumber = 3;
  ::google::protobuf::int32 rfidcardno() const;
  void set_rfidcardno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ArduinoConnected)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool fail_;
  ::google::protobuf::int32 arduinoid_;
  ::google::protobuf::int32 rfidcardno_;
  mutable int _cached_size_;
  friend struct ::protobuf_Protos_2fSeverSocketMessages_2eproto::TableStruct;
  friend void ::protobuf_Protos_2fSeverSocketMessages_2eproto::InitDefaultsArduinoConnectedImpl();
};
// -------------------------------------------------------------------

class ClientConnected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClientConnected) */ {
 public:
  ClientConnected();
  virtual ~ClientConnected();

  ClientConnected(const ClientConnected& from);

  inline ClientConnected& operator=(const ClientConnected& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientConnected(ClientConnected&& from) noexcept
    : ClientConnected() {
    *this = ::std::move(from);
  }

  inline ClientConnected& operator=(ClientConnected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientConnected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientConnected* internal_default_instance() {
    return reinterpret_cast<const ClientConnected*>(
               &_ClientConnected_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ClientConnected* other);
  friend void swap(ClientConnected& a, ClientConnected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientConnected* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientConnected* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientConnected& from);
  void MergeFrom(const ClientConnected& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientConnected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 rfIdCardNo = 1;
  void clear_rfidcardno();
  static const int kRfIdCardNoFieldNumber = 1;
  ::google::protobuf::int32 rfidcardno() const;
  void set_rfidcardno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClientConnected)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 rfidcardno_;
  mutable int _cached_size_;
  friend struct ::protobuf_Protos_2fSeverSocketMessages_2eproto::TableStruct;
  friend void ::protobuf_Protos_2fSeverSocketMessages_2eproto::InitDefaultsClientConnectedImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TEST

// int32 number = 1;
inline void TEST::clear_number() {
  number_ = 0;
}
inline ::google::protobuf::int32 TEST::number() const {
  // @@protoc_insertion_point(field_get:TEST.number)
  return number_;
}
inline void TEST::set_number(::google::protobuf::int32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:TEST.number)
}

// -------------------------------------------------------------------

// ServerMessage

// .ArduinoConnected arduinoConnectedMessage = 1;
inline bool ServerMessage::has_arduinoconnectedmessage() const {
  return message_case() == kArduinoConnectedMessage;
}
inline void ServerMessage::set_has_arduinoconnectedmessage() {
  _oneof_case_[0] = kArduinoConnectedMessage;
}
inline void ServerMessage::clear_arduinoconnectedmessage() {
  if (has_arduinoconnectedmessage()) {
    delete message_.arduinoconnectedmessage_;
    clear_has_message();
  }
}
inline ::ArduinoConnected* ServerMessage::release_arduinoconnectedmessage() {
  // @@protoc_insertion_point(field_release:ServerMessage.arduinoConnectedMessage)
  if (has_arduinoconnectedmessage()) {
    clear_has_message();
      ::ArduinoConnected* temp = message_.arduinoconnectedmessage_;
    message_.arduinoconnectedmessage_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ArduinoConnected& ServerMessage::arduinoconnectedmessage() const {
  // @@protoc_insertion_point(field_get:ServerMessage.arduinoConnectedMessage)
  return has_arduinoconnectedmessage()
      ? *message_.arduinoconnectedmessage_
      : *reinterpret_cast< ::ArduinoConnected*>(&::_ArduinoConnected_default_instance_);
}
inline ::ArduinoConnected* ServerMessage::mutable_arduinoconnectedmessage() {
  if (!has_arduinoconnectedmessage()) {
    clear_message();
    set_has_arduinoconnectedmessage();
    message_.arduinoconnectedmessage_ = new ::ArduinoConnected;
  }
  // @@protoc_insertion_point(field_mutable:ServerMessage.arduinoConnectedMessage)
  return message_.arduinoconnectedmessage_;
}

// .ClientConnected clientConnectedMessage = 2;
inline bool ServerMessage::has_clientconnectedmessage() const {
  return message_case() == kClientConnectedMessage;
}
inline void ServerMessage::set_has_clientconnectedmessage() {
  _oneof_case_[0] = kClientConnectedMessage;
}
inline void ServerMessage::clear_clientconnectedmessage() {
  if (has_clientconnectedmessage()) {
    delete message_.clientconnectedmessage_;
    clear_has_message();
  }
}
inline ::ClientConnected* ServerMessage::release_clientconnectedmessage() {
  // @@protoc_insertion_point(field_release:ServerMessage.clientConnectedMessage)
  if (has_clientconnectedmessage()) {
    clear_has_message();
      ::ClientConnected* temp = message_.clientconnectedmessage_;
    message_.clientconnectedmessage_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ClientConnected& ServerMessage::clientconnectedmessage() const {
  // @@protoc_insertion_point(field_get:ServerMessage.clientConnectedMessage)
  return has_clientconnectedmessage()
      ? *message_.clientconnectedmessage_
      : *reinterpret_cast< ::ClientConnected*>(&::_ClientConnected_default_instance_);
}
inline ::ClientConnected* ServerMessage::mutable_clientconnectedmessage() {
  if (!has_clientconnectedmessage()) {
    clear_message();
    set_has_clientconnectedmessage();
    message_.clientconnectedmessage_ = new ::ClientConnected;
  }
  // @@protoc_insertion_point(field_mutable:ServerMessage.clientConnectedMessage)
  return message_.clientconnectedmessage_;
}

inline bool ServerMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void ServerMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline ServerMessage::MessageCase ServerMessage::message_case() const {
  return ServerMessage::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ArduinoConnected

// bool fail = 1;
inline void ArduinoConnected::clear_fail() {
  fail_ = false;
}
inline bool ArduinoConnected::fail() const {
  // @@protoc_insertion_point(field_get:ArduinoConnected.fail)
  return fail_;
}
inline void ArduinoConnected::set_fail(bool value) {
  
  fail_ = value;
  // @@protoc_insertion_point(field_set:ArduinoConnected.fail)
}

// int32 arduinoId = 2;
inline void ArduinoConnected::clear_arduinoid() {
  arduinoid_ = 0;
}
inline ::google::protobuf::int32 ArduinoConnected::arduinoid() const {
  // @@protoc_insertion_point(field_get:ArduinoConnected.arduinoId)
  return arduinoid_;
}
inline void ArduinoConnected::set_arduinoid(::google::protobuf::int32 value) {
  
  arduinoid_ = value;
  // @@protoc_insertion_point(field_set:ArduinoConnected.arduinoId)
}

// int32 rfIdCardNo = 3;
inline void ArduinoConnected::clear_rfidcardno() {
  rfidcardno_ = 0;
}
inline ::google::protobuf::int32 ArduinoConnected::rfidcardno() const {
  // @@protoc_insertion_point(field_get:ArduinoConnected.rfIdCardNo)
  return rfidcardno_;
}
inline void ArduinoConnected::set_rfidcardno(::google::protobuf::int32 value) {
  
  rfidcardno_ = value;
  // @@protoc_insertion_point(field_set:ArduinoConnected.rfIdCardNo)
}

// -------------------------------------------------------------------

// ClientConnected

// int32 rfIdCardNo = 1;
inline void ClientConnected::clear_rfidcardno() {
  rfidcardno_ = 0;
}
inline ::google::protobuf::int32 ClientConnected::rfidcardno() const {
  // @@protoc_insertion_point(field_get:ClientConnected.rfIdCardNo)
  return rfidcardno_;
}
inline void ClientConnected::set_rfidcardno(::google::protobuf::int32 value) {
  
  rfidcardno_ = value;
  // @@protoc_insertion_point(field_set:ClientConnected.rfIdCardNo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Protos_2fSeverSocketMessages_2eproto__INCLUDED
